<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QnA</name>
    </assembly>
    <members>
        <member name="T:AAI.QnAService">
            <summary>
            Manage a connection to a Azure QnAMaker service and the knowledge base for the QnA. 
            </summary>
        </member>
        <member name="P:AAI.QnAService.AuthoringKey">
            <value>
            Authoring key for a QnAMaker, set to a key from the azure App Server created for the QnAMaker (see https://portal.azure.com).
            </value>
        </member>
        <member name="P:AAI.QnAService.ResourceName">
            <value>
            Resource name for a QnAMaker, set to the resource name for the App Server created for the QnAMaker (see https://portal.azure.com).
            </value>
        </member>
        <member name="P:AAI.QnAService.ApplicationName">
            <value>
            Application name for a QnAMaker, usually the same as the ResourceName.
            </value>
        </member>
        <member name="P:AAI.QnAService.KnowledgeBaseID">
            <value>
            Unique identifier for the created published Knowledge base. (see https://qnamaker.ai)
            </value>
        </member>
        <member name="P:AAI.QnAService.QueryEndpointKey">
            <value>
            Key for the created published Knowledge base. (see https://qnamaker.ai)
            </value>
        </member>
        <member name="M:AAI.QnAService.#ctor">
             <summary>
             Default constructor, requires AuthoringKey, ResourceName, and ApplicationName to be set prior to acccessing Azure QnAMaker App Service. 
             Requires KnowledgeBaseID to be set prior to accessing the knowledge base associated with QnAMaker service. 
            
             <example>
             For example, to create a QnAService reading authoring key, resource name, application name knowledge base id, and query endpoint key from the enivronment:
            
             <code>
             private static string ProcessConfig(string key) 
               { return System.Environment.GetEnvironmentVariable(key, EnvironmentVariableTarget.Process); }
             
             AAI.QnAService service = new AAI.QnAService
             {
                 AuthoringKey = ProcessConfig("AuthoringKey"),
                 ResourceName = ProcessConfig("ResourceName"),
                 ApplicationName = ProcessConfig("ApplicationName"),
                 KnowledgeBaseID = ProcessConfig("KnowledgeBaseID"),
                 QueryEndpointKey = ProcessConfig("QueryEndpointKey")
             };
             </code>
             </example>
             </summary>
             <remarks>
             Not all of the values need to be available during construction.
             (e.g., Knowledge base is not available until the QnA has created one - see CreateQnA method):
             </remarks>
        </member>
        <member name="M:AAI.QnAService.#ctor(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Create QnAService passing in AuthoringKey, ResourceName, ApplicationName , KnowledgeBaseID and QueryEndpointKey. Valid values for AuthoringKey, 
             ResourceName are required before accessing the Azure QnAMaker service. A valid KnowledgeBaseID is required before accessing the knowledge base associated
             with the QnAMaker service can be accesssed (see CreateQnA() method).
            
             <example>
             For example, to create a QnAService reading authoring key, resource name, application name knowledge base id, and query endpoint key from the enivronment:
             
             <code>
             private static string ProcessConfig(string key) 
               { return System.Environment.GetEnvironmentVariable(key, EnvironmentVariableTarget.Process); }
             
             AAI.QnAService service = new AAI.QnAService(
                 ProcessConfig("AuthoringKey"), 
                 ProcessConfig("ResourceName"), 
                 ProcessConfig("ApplicationName"),
                 ProcessConfig("KnowledgeBaseID"),
                 ProcessConfig("QueryEndpointKey") );
             </code>
             </example> 
             </summary>
             <remarks>
             Some or all of the values can be null. However, access to the QnaMaker service or knowlege base is not possible until the correct properties are set.
             (e.g., Knowledge base is not available until the QnA has created one - see CreateQnA method):
             </remarks>
             <param name="authoringKey">Access key to Azure QnAMaker service, obtained from the Azure portal.</param>
             <param name="resourceName">Resource name given to Azure QnAMaker service when created, obtained from the Azure portal.</param>
             <param name="applicationName">Application name given to Azure QnAMaker service when created, obtained from the Azure portal.</param>
             <param name="knowledgeBaseID">Knowledge base id, returned when knowledge base is created (see CreateQnA())</param>
             <param name="queryEndpointKey">Key for knowledge base, returned when knowledge base is created and can be obtained by querying Azure QnAMaker (see QueryKey())</param>
        </member>
        <member name="M:AAI.QnAService.GetExistingAnswers(System.Boolean)">
            <summary>
            Download knowledge base creating dictionary where the lookup is the answer. There can be multiple questions per answer.
            </summary>
            <param name="published"></param>
            <returns>dictionary of entire knowledge base</returns>
        </member>
        <member name="M:AAI.QnAService.QnAEndpoint">
            <summary>
            QnA endpoint is used to query and train knowledge base.
            </summary>
            <returns>QnA endpoint object</returns>
        </member>
        <member name="M:AAI.QnAService.AzureEndpoint">
            <summary>
            Azure endpoint is used to create, publish, download, update, and delete QnA knowledge bases. Creates
            one using configured data.
            </summary>
            <returns>azure endpoint object</returns>
        </member>
        <member name="M:AAI.QnAService.QueryKey">
            <summary>
            Returns the Query key required when accessing the QnA
            </summary>
            <returns>QnA Auth Key</returns>
        </member>
        <member name="M:AAI.QnAService.Ask(System.String,System.Boolean,System.Int32)">
            <summary>
            Queries the knowledge base for
            </summary>
            <param name="question">Question being asked of the knowledge base.</param>
            <param name="published">Use the published (true) or test knowledge base (false).</param>
            <param name="topQuestions">The number of answers to return, defaults to one.</param>
            <returns></returns>
        </member>
        <member name="M:AAI.QnAService.CreateQnA(Microsoft.Azure.CognitiveServices.Knowledge.QnAMaker.Models.CreateKbDTO)">
            <summary>
            Create a new QnA Knowledge base, the returned ID and endpoint key should be retained
            (e.g., appsettings.json file) so they can be reused when instantiating other QnAService's.
            The knowledge base ID and endpoint key values can be located in http://qnamaker.ai for
            published knowledges bases.
            </summary>
            <param name="qnaData">Name and QnaList fields musb be populated.</param>
            <returns>( status,
                       knowledgeBaseId,
                       endPointKey</returns>
        </member>
        <member name="M:AAI.QnAService.DeleteKnowledgeBase">
            <summary>
            Delete the knowledge base.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AAI.QnAService.Publish">
            <summary>
            Moves the test knowledge base to production.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AAI.QnAService.AddToQnA(System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Knowledge.QnAMaker.Models.QnADTO})">
             <summary>
              Add/update one or more entries in the QnA knowledge base. When the answer in
              an entry matches (string match) an existing value in the knowledge base the
              QnADTO is converted to an UpdateQnaDTO and added to a list of udpates.
            
              To perform udpates, the entire knwoledge base is pulled down.
             </summary>
             <param name="entries"></param>
             <returns></returns>
        </member>
        <member name="M:AAI.QnAService.AlterKb(System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Knowledge.QnAMaker.Models.QnADTO},System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Knowledge.QnAMaker.Models.UpdateQnaDTO},System.Collections.Generic.IList{System.Nullable{System.Int32}})">
            <summary>
            Make alterations to the knowledge base, polls until the knowledge base has been updated.
            </summary>
            <param name="additions"></param>
            <param name="updates"></param>
            <param name="deletes"></param>
            <returns>(Operation state, optional error response)</returns>
        </member>
        <member name="M:AAI.QnAService.MonitorOperation(Microsoft.Azure.CognitiveServices.Knowledge.QnAMaker.Models.Operation)">
            <summary>
            Moniter long running operations by polling the status of an operation occuring in Azure QnA service
            </summary>
            <param name="operation">Operation returned from call to monitor</param>
            <returns>Final operation</returns>
        </member>
    </members>
</doc>
